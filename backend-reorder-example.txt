=== CONTEXTO BACKEND PARA REORDENAR MÓDULOS ===

REQUISIÇÃO DO FRONTEND:
Method: PUT
URL: http://localhost:3001/api/modules/reorder
Content-Type: application/json

Body (JSON):
{
  "modules": [
    {
      "id": 1,
      "order": 1
    },
    {
      "id": 2,
      "order": 2  
    },
    {
      "id": 3,
      "order": 3
    }
  ]
}

=== IMPLEMENTAÇÃO BACKEND NECESSÁRIA ===

// Node.js + Express
app.put('/api/modules/reorder', async (req, res) => {
  try {
    const { modules } = req.body;
    
    // Validação do payload
    if (!modules || !Array.isArray(modules)) {
      return res.status(400).json({ 
        error: 'Payload inválido' 
      });
    }
    
    // Atualizar cada módulo no banco de dados
    for (const moduleData of modules) {
      const { id, order } = moduleData;
      
      // SQL para MySQL/MariaDB
      await db.query(
        'UPDATE modules SET module_order = ? WHERE id = ?',
        [order, id]
      );
      
      // OU para PostgreSQL:
      // await db.query(
      //   'UPDATE modules SET module_order = $1 WHERE id = $2',
      //   [order, id]
      // );
    }
    
    res.status(200).json({ 
      success: true,
      message: 'Módulos reordenados com sucesso'
    });
    
  } catch (error) {
    console.error('Erro ao reordenar:', error);
    res.status(500).json({ 
      error: 'Erro interno do servidor' 
    });
  }
});

=== ESTRUTURA DA TABELA ===

CREATE TABLE modules (
  id INT PRIMARY KEY AUTO_INCREMENT,
  trilha_id INT,
  title VARCHAR(255),
  description TEXT,
  module_order INT DEFAULT 1,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

=== TESTES ===

1. Verificar se endpoint existe
2. Verificar se aceita PUT requests  
3. Verificar se valida o JSON
4. Verificar se atualiza o banco corretamente
5. Verificar se retorna status 200
